version: '3.8'

services:
  # Product Service
  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=product-postgres
      - DB_PORT=5432
      - DB_NAME=product_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      product-postgres:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  product-postgres:
    image: postgres:14-alpine
    container_name: product-postgres
    ports:
      - "5432:5432" # Product service database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=product_db
    volumes:
      - product-postgres-data:/var/lib/postgresql/data
      - ./product-service/db/init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Customer Service
  customer-service:
    build: ./customer-service
    container_name: customer-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGO_URI=mongodb://customer-mongo:27017/customer_db
    depends_on:
      customer-mongo:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  customer-mongo:
    image: mongo:6-jammy
    container_name: customer-mongo
    ports:
      - "27017:27017" # Customer service database
    volumes:
      - customer-mongo-data:/data/db
      - ./customer-service/db/init/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DB_HOST=order-postgres
      - DB_PORT=5432
      - DB_NAME=order_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - PRODUCT_SERVICE_URL=http://product-service:3000
      - CUSTOMER_SERVICE_URL=http://customer-service:3001
    depends_on:
      order-postgres:
        condition: service_healthy
      product-service:
        condition: service_started
      customer-service:
        condition: service_started
    networks:
      - microservices-network
    restart: unless-stopped

  order-postgres:
    image: postgres:14-alpine
    container_name: order-postgres
    ports:
      - "5454:5432" # Order service database on port 5454
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=order_db
    volumes:
      - order-postgres-data:/var/lib/postgresql/data
      - ./order-service/db/init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  microservices-network:
    driver: bridge

volumes:
  product-postgres-data:
  customer-mongo-data:
  order-postgres-data:
